-------------------------------------------------------------------
-- WARM UPS: Type the following commands to build muscle memory. --
-------------------------------------------------------------------
-- 1. [Distinct values in column]: SELECT DISTINCT price FROM products;
-- 2. [Filter using set of values]: SELECT * FROM products WHERE price IN (5.99, 9.99);
-- 3. [Filter with wildcard]: SELECT * FROM products WHERE title LIKE '%Book%;
-- 4. [Less-than filter and order by]: SELECT * FROM products WHERE price < 10 ORDER BY price DESC;
--------------------------------------------------------
-- EXERCISES: Answer using the techniques from above. --
--------------------------------------------------------
-- 1. Find how many distinct sets of tags there are in the products table.
-- SELECT DISTINCT tags FROM products;
-- 2. Find all the rows of purchases made from either Virginia (VA) or Wisconsin (WI).
-- SELECT * FROM purchases WHERE (state = 'VA' or state = 'WI');
-- 3. Find all the rows of the purchases made by people with the first name of "Johnathan".
-- SELECT * FROM purchases WHERE name LIKE '%Johnathan%';
-- 4. How many purchases were made by people whose last name starts with an 'A'?
-- SELECT * FROM purchases WHERE name LIKE '%_A%';
-- 5. How many products cost between $10 and 30?
-- SELECT * FROM products WHERE (price>10 AND price<30);
-- 6. What is the average price among Returned items, from the purchase_items table?
-- SELECT AVG(price) FROM purchase_items WHERE status = 'Returned';

-------------------------------------------------------------------
-- WARM UPS: Type the following commands to build muscle memory. --
-------------------------------------------------------------------
-- 1. [Grouping by one column]: select state, count(id) from purchases group by state;
-- 2. [Grouping by multiple columns]: select state, zipcode, count(id) from purchases group by state, zipcode;
--------------------------------------------------------
-- EXERCISES: Answer using the techniques from above. --
--------------------------------------------------------
-- 1. Find the most recent purchase made within each state.
-- SELECT MAX(created_at), state FROM PURCHASES GROUP BY state;
-- 2. Use the purchase_items table to find the total number of each product_id sold.
-- SELECT product_id, COUNT(purchase_items_id) FROM purchase_items GROUP BY product_id ORDER BY product_id DESC;
-- 3. Use the purchase_items table to see the total dollar amount of items in each state: Delivered, Returned, Pending
-- SELECT  status, SUM(price) FROM purchase_items GROUP BY status;
-- 4. In the products table, find how many products are under each set of tags.
-- SELECT tags, COUNT(products) FROM products GROUP BY tags;
-- 5. Modify the previous query to find how many products over $10 are under each set of tags.
-- SELECT tags, COUNT(products) FROM products WHERE price > 10 GROUP BY tags;
-- 6. Use the users table to find out how many purchases each user made.
-- SELECT user_id, COUNT(user_id) FROM purchases GROUP BY user_id;
-- 7. What is the first purchase that was made in each state, in each zipcode? (No, zipcodes do not repeat between states, but write your query as though they did.)
-- SELECT zipcode, state, MIN(created_at) FROM purchases GROUP BY zipcode, state;

----------------------------------------
-- EXTRA CREDIT: If you finish early. --
----------------------------------------
-- 1. The DATEPART() function extracts whichever part of the
--  timestamp you want. E.g. DATEPART(year FROM '2001-02-16 20:38:40')
--  returns 2001. Use DATEPART() to extract which calendar month
--  each user was created in.
-- select * from users;

--SELECT user_id, DATE_PART('MONTH', created_at) FROM users;

-- 2. Use DATEPART() and a group by statement to count how many
--    users were created in each calendar month.

-- SELECT DATE_PART('MONTH', created_at) FROM users GROUP BY DATE_PART('MONTH', created_at);

-- 3. Use the DATEPART() function to find the number of users
--    created during each day of the week.
--    Hint: Use DAY as the first input

-- SELECT DATE_PART('dow', created_at) +1, COUNT(*) FROM users GROUP BY DATE_PART('dow', created_at) +1 order by 2;

-------------------------------------------------------------------
-- WARM UPS: Type the following commands to build muscle memory. --
-------------------------------------------------------------------
-- 1. [Single-value subquery]: select * from purchase_items where price = (select max(price) from products)
-- 2. [Multiple-value subquery]: select * from purchases where user_id in (select user_id from users where email like '%@yahoo.com') or (select user_id from users where email like '%@gmail.com')
--------------------------------------------------------
-- EXERCISES: Answer using the techniques from above. --
--------------------------------------------------------
-- 1. Select the products that cost more than average.
-- SELECT title, price FROM products WHERE price > (SELECT avg(price) FROM products);
-- 2. Find all the purchase_items that represent orders for the lowest-priced product.
-- select * from purchase_items where price = (select min(price) from purchase_items);
-- 3. Find the most recent purchase made by a user with a Gmail email address.
-- select user_id, max(created_at) from purchases where user_id in (select user_id from users where email like '%@gmail.com%') group by user_id;
-- 4. List the titles of the products that were ever returned in quantities greater than 4.
select title from products and select quantity from purchase_items;

-------------------------------------------------------------------
-- WARM UPS: Type the following commands to build muscle memory. --
-------------------------------------------------------------------
-- 1. [Join]: select name, email from purchases join users on purchases.user_id = users.id
-- select name, email from purchases join users on purchases.user_id = users.user_id
-- 2. [Same join using aliases]: select name, email from users as u join purchases as p on p.user_id=u.id
-- 3. [Using alias in filter]: select name, email from users as u join purchases as p on p.user_id=u.id where u.email like '%gmail.com'
--------------------------------------------------------
-- EXERCISES: Answer using the techniques from above. --
--------------------------------------------------------
-- 1. Join the purchases and purchase_items tables, on purchases.id and purchase_items.purchase_id
--select * from purchases,purchase_items where purchases.purchase_id = purchase_items.purchase_id;
-- 2. Modify the last query, aliasing purchases as p and purchase_items as pi.
--select * from purchases as p join purchase_items as pi on p.purchase_id = pi.purchase_id;
-- 3. Using the same join, perform a group by to sum the total quantity of items purchased under each user_id.
--select sum(quantity) from purchases as p join purchase_items as pi on p.purchase_id = pi.purchase_id group by user_id;
-- 4. Using the same join, find the average purchase amount from each state.
--select state, avg(price) from purchases as p join purchase_items as pi on p.purchase_id = pi.purchase_id group by state;
-- 5. Join the purchases and users tables, using an alias for each table.
--select * from purchases as p join users as u on p.user_id = u.user_id;
-- 6. Using the above join, filter to just the orders with an Gmail email address OR a buyer named 'Clay'
--select * from purchases as p join users as u on p.user_id = u.user_id where email like '%@gmail%' or name like '%Clay%';
----------------------------------------
-- EXTRA CREDIT: If you finish early. --
----------------------------------------
-- 1. Joins can combine more than two tables. Join the users table,  purchases table, and purchase items table. Remember to use aliases.
--select * from purchases as p join purchase_items as pi on p.purchase_id = pi.purchase_id join users as u on p.user_id = u.user_id;

-------------------------------------------------------------------
-- WARM UPS: Type the following commands to build muscle memory. --
-------------------------------------------------------------------
-- 1. [Grouping by multiple columns]: SELECT state, zipcode, COUNT(id) FROM purchases GROUP BY state, zipcode;
-- 2. [Group by using a HAVING filter]:
-- SELECT state, COUNT(id) FROM purchases
--                                      GROUP BY state
--                                      HAVING COUNT(id) > 100;
-- 3. [Multiple-value subquery]: SELECT * FROM purchases WHERE
--            user_id IN
--            (SELECT user_id FROM users WHERE email LIKE '%@gmail.com');
-- 4. [Using alias in filter]: SELECT name, email FROM users AS u
--            JOIN purchases AS p ON p.user_id=u.id
--            WHERE u.email LIKE '%@gmail.com';
--------------------------------------------------------
-- EXERCISES: Answer using the techniques from above. --
--------------------------------------------------------
-- 1. Find the most recent purchase made by each user.
--select user_id, max(created_at) from purchases group by user_id;
-- 3. Find the oldest purchase made by a user with a yahoo email
--    address.
--select min(created_at) from purchases where user_id in (select user_id from users where email like '%yahoo%');
-- 4. Find all the users' emails who made at least one purchase from the
--    state of NY.
-- SELECT email FROM users AS u JOIN purchases AS p ON p.user_id=u.user_id join purchase_items as pi on p.purchase_id = pi.purchase_id where p.state = 'NY' and pi.quantity > 0;
----------------------------------------
-- EXTRA CREDIT: If you finish early. --
----------------------------------------
-- 1. Use the DATEPART() function to find the number of users created
--    during each day of the week.
--    Hint: Use DW as the first input
--SELECT DATE_PART('dow', created_at) +1, COUNT(*)
--FROM users 
--GROUP BY DATE_PART ('dow', created_at) +1 
--ORDER BY 1

-- 2. How about each day of the month?
SELECT DATE_PART('d', created_at) +1, COUNT(*)
FROM users 
GROUP BY DATE_PART ('d', created_at) +1 
ORDER BY 1

-------------------------------------------------------------------
-- WARM UPS: Type the following commands to build muscle memory. --
-------------------------------------------------------------------
-- 1. [Inner Join]: SELECT *
--                  FROM users AS u
--                  JOIN purchases AS p
--                  ON p.user_id=u.id;
-- 2. [Left Join]: SELECT *
--                 FROM users AS u
--                 LEFT JOIN purchases AS p
--                 ON p.user_id=u.id;
-- 3. [Finding NULLS]: SELECT *
--                     FROM users AS u
--                     WHERE details IS NULL;
--------------------------------------------------------
-- EXERCISES: Answer using the techniques from above. --
--------------------------------------------------------
-- 1. First, join the products table to the purchase_items
--    table. Choose a join that will KEEP products even
--    if they don't have any associated purchase_items.
--SELECT * FROM products AS p LEFT JOIN purchase_items AS pi ON p.product_id=pi.product_id;
-- 2. Were there any products with no purchase?
-- yes
--    Query the joined table for rows with NULL quantity.
--SELECT * FROM products AS p LEFT JOIN purchase_items AS pi ON p.product_id=pi.product_id where quantity IS NULL;
-- 3. Now add a groupby to find the average quantity that
--    each product was purchased in.
--SELECT title, avg(quantity) FROM products AS p LEFT JOIN purchase_items AS pi ON p.product_id=pi.product_id group by title;
-- 4. Let's find the total number of items associated with each
--    user.
-- a. First, join the purchases and purchase_items table,
--    so we have both user_id and quantity.
--    Which kind of join is appropriate here?
-- b. Now use a group by to find the total quantity for each
--    user_id.
--SELECT user_id, sum(quantity) FROM purchases AS p LEFT JOIN purchase_items AS pi ON p.purchase_id=pi.purchase_id group by user_id;

-------------------------------------------------------------------
-- WARM UPS: Type the following commands to build muscle memory. --
-------------------------------------------------------------------
-- 1. [Union Join]: SELECT email, id FROM users
--                  UNION
--                  SELECT title, price FROM products;
-- 2. [Conditional]: SELECT title,
--                     CASE WHEN (price < 100)
--                     THEN 'cheap'
--                     ELSE 'expensive'
--                   END FROM products;
--------------------------------------------------------
-- EXERCISES: Answer using the techniques from above. --
--------------------------------------------------------
-- 0. Select all the names associated with purchases made after
--    2010-01-01,
--    and all the emails associated with users made after 2010-01-01.
--SELECT name FROM purchases WHERE created_at > '2010-01-01'
--                  UNION
--SELECT email FROM users where created_at > '2010-01-01';
-- 1. Write a conditional that will categorize each purchase as
--    'West Coast' (if it
--    was ordered from CA, OR, or WA) or 'Other'
--select purchase_id, state, CASE WHEN (state = 'CA' or state = 'OR' or state = 'WA')
--						   THEN 'West Coast'
--						   ELSE 'Other'
--						   END FROM purchases;
-- 2. Modify the last query with a group by statement, to find
--    the number of purchases among West Coast states vs Others.
--select count(purchase_id), state, CASE WHEN (state = 'CA' or state = 'OR' or state = 'WA')
--						   THEN 'West Coast'
--						   ELSE 'Other'
--						   END FROM purchases group by state;
-- 3. Write a conditional to divide users into three groups, based on
--    their created_at:
--    early for before 2009-06-01,
--    majority for between 2009-06-01 and 2010-01-01
--    late for after 2010-01-01
--select user_id, email, CASE WHEN (created_at < '2009-06-01')
--						   THEN 'early'
--						   WHEN (created_at > '2009-06-01' AND created_at < '2010-01-01')
--						   THEN 'majority'
--						   WHEN (created_at > '2010-01-01')
--						   THEN 'late'
--						   END FROM users;

-- 4. Modify the last query by adding a join against the purchases
--    table.
--    Note: Since created_at exists in both tables, you'll need to
--    prefix with the table name (e.g users.created_at)
--select name, u.user_id, email, CASE WHEN (u.created_at < '2009-06-01')
--						   THEN 'early'
--						   WHEN (u.created_at > '2009-06-01' AND u.created_at < '2010-01-01')
--						   THEN 'majority'
--						   WHEN (u.created_at > '2010-01-01')
--						   THEN 'late'
--						   END FROM users as u JOIN purchases as p ON p.user_id=u.user_id;
-- 5. Add a groupby statement to find which group of customers makes
--    more purchases: early, majority, or late.
--SELECT COUNT(u.user_id), 
--CASE WHEN (u.created_at < '2009-06-01 00:00:00-00')
--THEN 'early'
--WHEN (u.created_at > '2009-06-01 00:00:00-00' AND u.created_at < '2010-01-01 00:00:00-00')
--THEN 'majority'
--ELSE 'late'
--END AS result FROM users AS u
--JOIN purchases AS p
--ON u.user_id = p.user_id
--GROUP BY result;

----------------------------------------
-- EXTRA CREDIT: If you finish early. --
----------------------------------------
-- 1. Use DATEPART() and a conditional to categorize purchases as
--    'weekday' and 'weekend'.
--    Hint: DATEPART(DW, column) outputs day of week as a number
--    with Sunday as 0, Saturday as 6.
SELECT CASE
	WHEN DATE_PART('dow', created_at) IN (0, 6) THEN 'weekend'
	ELSE 'weekday'
	END AS day_type
FROM purchases;
-- 2. Group by state and weekday/weekend to see the number of weekday
--    weekend purchases per state.
SELECT state,
    CASE WHEN DATE_PART('dow', created_at) IN (0, 6) THEN 'weekend'
	ELSE 'weekday'
	END AS day_type,
	COUNT(*)
FROM purchases
GROUP BY state, CASE WHEN DATE_PART('dow', created_at) IN (0, 6) THEN 'weekend'
	ELSE 
