-------------------------------------------------------------------
-- WARM UPS: Type the following commands to build muscle memory. --
-------------------------------------------------------------------
-- 1. [Distinct values in column]: SELECT DISTINCT price FROM products;
-- 2. [Filter using set of values]: SELECT * FROM products WHERE price IN (5.99, 9.99);
-- 3. [Filter with wildcard]: SELECT * FROM products WHERE title LIKE '%Book%;
-- 4. [Less-than filter and order by]: SELECT * FROM products WHERE price < 10 ORDER BY price DESC;
--------------------------------------------------------
-- EXERCISES: Answer using the techniques from above. --
--------------------------------------------------------
-- 1. Find how many distinct sets of tags there are in the products table.
-- SELECT DISTINCT tags FROM products;
-- 2. Find all the rows of purchases made from either Virginia (VA) or Wisconsin (WI).
-- SELECT * FROM purchases WHERE (state = 'VA' or state = 'WI');
-- 3. Find all the rows of the purchases made by people with the first name of "Johnathan".
-- SELECT * FROM purchases WHERE name LIKE '%Johnathan%';
-- 4. How many purchases were made by people whose last name starts with an 'A'?
-- SELECT * FROM purchases WHERE name LIKE '%_A%';
-- 5. How many products cost between $10 and 30?
-- SELECT * FROM products WHERE (price>10 AND price<30);
-- 6. What is the average price among Returned items, from the purchase_items table?
-- SELECT AVG(price) FROM purchase_items WHERE status = 'Returned';

-------------------------------------------------------------------
-- WARM UPS: Type the following commands to build muscle memory. --
-------------------------------------------------------------------
-- 1. [Grouping by one column]: select state, count(id) from purchases group by state;
-- 2. [Grouping by multiple columns]: select state, zipcode, count(id) from purchases group by state, zipcode;
--------------------------------------------------------
-- EXERCISES: Answer using the techniques from above. --
--------------------------------------------------------
-- 1. Find the most recent purchase made within each state.
-- SELECT MAX(created_at), state FROM PURCHASES GROUP BY state;
-- 2. Use the purchase_items table to find the total number of each product_id sold.
-- SELECT product_id, COUNT(purchase_items_id) FROM purchase_items GROUP BY product_id ORDER BY product_id DESC;
-- 3. Use the purchase_items table to see the total dollar amount of items in each state: Delivered, Returned, Pending
-- SELECT  status, SUM(price) FROM purchase_items GROUP BY status;
-- 4. In the products table, find how many products are under each set of tags.
-- SELECT tags, COUNT(products) FROM products GROUP BY tags;
-- 5. Modify the previous query to find how many products over $10 are under each set of tags.
-- SELECT tags, COUNT(products) FROM products WHERE price > 10 GROUP BY tags;
-- 6. Use the users table to find out how many purchases each user made.
-- SELECT user_id, COUNT(user_id) FROM purchases GROUP BY user_id;
-- 7. What is the first purchase that was made in each state, in each zipcode? (No, zipcodes do not repeat between states, but write your query as though they did.)
-- SELECT zipcode, state, MIN(created_at) FROM purchases GROUP BY zipcode, state;

----------------------------------------
-- EXTRA CREDIT: If you finish early. --
----------------------------------------
-- 1. The DATEPART() function extracts whichever part of the
--  timestamp you want. E.g. DATEPART(year FROM '2001-02-16 20:38:40')
--  returns 2001. Use DATEPART() to extract which calendar month
--  each user was created in.
-- select * from users;

--SELECT user_id, DATE_PART('MONTH', created_at) FROM users;

-- 2. Use DATEPART() and a group by statement to count how many
--    users were created in each calendar month.

-- SELECT DATE_PART('MONTH', created_at) FROM users GROUP BY DATE_PART('MONTH', created_at);

-- 3. Use the DATEPART() function to find the number of users
--    created during each day of the week.
--    Hint: Use DAY as the first input

-- SELECT DATE_PART('dow', created_at) +1, COUNT(*) FROM users GROUP BY DATE_PART('dow', created_at) +1 order by 2;

-------------------------------------------------------------------
-- WARM UPS: Type the following commands to build muscle memory. --
-------------------------------------------------------------------
-- 1. [Single-value subquery]: select * from purchase_items where price = (select max(price) from products)
-- 2. [Multiple-value subquery]: select * from purchases where user_id in (select user_id from users where email like '%@yahoo.com') or (select user_id from users where email like '%@gmail.com')
--------------------------------------------------------
-- EXERCISES: Answer using the techniques from above. --
--------------------------------------------------------
-- 1. Select the products that cost more than average.
-- SELECT title, price FROM products WHERE price > (SELECT avg(price) FROM products);
-- 2. Find all the purchase_items that represent orders for the lowest-priced product.
-- select * from purchase_items where price = (select min(price) from purchase_items);
-- 3. Find the most recent purchase made by a user with a Gmail email address.
-- select user_id, max(created_at) from purchases where user_id in (select user_id from users where email like '%@gmail.com%') group by user_id;
-- 4. List the titles of the products that were ever returned in quantities greater than 4.
select * from products where product_id in (select product_id from purchase_items where quantity > 3 and status = 'Returned');
